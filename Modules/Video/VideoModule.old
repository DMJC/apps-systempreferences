#import <AppKit/AppKit.h>
#import "PreferencePanes.h"
#import <wlr/backend.h>
#import <wlr/backend/wayland.h>
#import <wlr/types/wlr_output.h>
#import <wayland-client.h>
#import <stdio.h>

@interface VideoModule : NSPreferencePane

@property (nonatomic, strong) NSComboBox *videoModeComboBox;
@property (nonatomic, strong) NSButton *applyButton;
@property (nonatomic, strong) NSMutableArray<NSString *> *videoModes;
@property (nonatomic) struct wlr_output *output;

@end

@implementation VideoModule

- (void)mainViewDidLoad {
    // Initialize UI elements
    self.videoModeComboBox = [[NSComboBox alloc] initWithFrame:NSMakeRect(20, 100, 200, 25)];
    self.applyButton = [[NSButton alloc] initWithFrame:NSMakeRect(230, 100, 100, 30)];
    [self.applyButton setTitle:@"Apply"];
    [self.applyButton setTarget:self];
    [self.applyButton setAction:@selector(applySelectedVideoMode)];

    // Add the combo box and button to the preference pane view
    [[self mainView] addSubview:self.videoModeComboBox];
    [[self mainView] addSubview:self.applyButton];

    // Initialize videoModes array
    self.videoModes = [NSMutableArray array];

    // Load available video modes
    [self initializeBackend];
}

- (void)initializeBackend {

    // Initialize Wayland display
    struct wl_display *display = wl_display_connect(NULL);
    if (!display) {
        NSLog(@"Failed to connect to Wayland display");
        return;
    }

    // Initialise event Loop
    struct wl_event_loop *event_loop = wl_display_get_event_loop(display);
    if (!event_loop) {
        NSLog(@"Failed to get Wayland event loop");
        return;
    }

    // Initialize Wayland backend
    struct wlr_backend *backend = wlr_wl_backend_create(display, NULL);
    if (!backend) {
        NSLog(@"Failed to initialize wlroots Wayland backend");
        wl_display_disconnect(display);
        return;
    }

    // Create custom listener context to associate `self` with the listener
    struct {
        struct wl_listener listener;
        __unsafe_unretained VideoModule *self; // Avoid retain cycle
    } *new_output_context = malloc(sizeof(*new_output_context));
    if (!new_output_context) {
        NSLog(@"Failed to allocate memory for new output listener");
        wl_display_disconnect(display);
        return;
    }

    new_output_context->self = self;
    new_output_context->listener.notify = handle_new_output;
    wl_signal_add(&backend->events.new_output, &new_output_context->listener);

    // Enter the Wayland display loop
    wl_display_run(display);

    // Clean up
    wl_list_remove(&new_output_context->listener.link);
    free(new_output_context);
    wl_display_disconnect(display);
}

// Updated C function with custom context
static void handle_new_output(struct wl_listener *listener, void *data) {
    // Retrieve the custom context to access `self`
    struct {
        struct wl_listener listener;
        __unsafe_unretained VideoModule *self;
    } *context = (void *)listener;

    VideoModule *self = context->self;
    struct wlr_output *output = data;

    // Log the new output
    NSLog(@"New output detected: %s", output->name);

    // Initialize output modes
    struct wlr_output_mode *mode;
    wl_list_for_each(mode, &output->modes, link) {
        NSString *modeString = [NSString stringWithFormat:@"%dx%d @ %.2fHz",
                                mode->width, mode->height, mode->refresh / 1000.0];
        [self.videoModes addObject:modeString];
    }

    // Refresh the combo box
    [self.videoModeComboBox removeAllItems];
    [self.videoModeComboBox addItemsWithObjectValues:self.videoModes];
}

- (void)applySelectedVideoMode {
    NSInteger selectedIndex = [self.videoModeComboBox indexOfSelectedItem];
    if (selectedIndex == -1) {
        NSLog(@"No video mode selected");
        return;
    }

    // Fetch the selected video mode
    NSString *selectedMode = self.videoModes[selectedIndex];
    NSLog(@"Applying video mode: %@", selectedMode);

    // Set the mode using wlroots API
    if (self.output) {
        struct wlr_output_mode *mode;
        wl_list_for_each(mode, &self.output->modes, link) {
            NSString *modeString = [NSString stringWithFormat:@"%dx%d @ %.2fHz",
                                    mode->width, mode->height, mode->refresh / 1000.0];
            if ([modeString isEqualToString:selectedMode]) {
                wlr_output_set_mode(self.output, mode);
                wlr_output_commit(self.output);
                NSLog(@"Video mode applied successfully!");
                break;
            }
        }
    }
}

@end

